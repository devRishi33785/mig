// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:123456@localhost:5432/coinservice?sslmode=disabled"
}

// Enums
enum Process {
  PENDING
  APPROVED
  NOTREADY
  REJECTED
}

enum Role {
  ADMIN
  USER
}

enum OperationType {
  DEPOSIT
  WITHDRAW
  BUY
  SELL
}

enum DepositState {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum WithdrawState {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum TradingGroupState {
  ENABLED
  DISABLED
}

enum BeneficiaryState {
  PENDING
  ACTIVE
  DISABLED
}

enum WalletKind {
  HOT
  COLD
  WARM
}

enum WalletStatus {
  ACTIVE
  DISABLED
}

enum OrderStatus {
  PENDING
  PARTIALLY_FILLED
  FILLED
  CANCELED
  REJECTED
}

enum OrderType {
  LIMIT
  MARKET
  STOP_LIMIT
  STOP_MARKET
}

model Users {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String
  firstName         String?
  lastName          String?
  provider          String?
  providerId        String?
  referralCode      String? // used if someone has invited the user
  countryId         Int?
  phone             String?
  country           String?
  address           String?
  city              String?
  pinCode           String?
  dateOfBirth       String?
  acceptedTerms     Boolean           @default(false)
  mfaEnabled        Boolean           @default(false)
  mfaSecret         String?
  idProofFront      String?
  idProofBack       String?
  profilePicture    String?
  selfiePicture     String?
  isVerified        Process           @default(NOTREADY)
  rejectionReason   String?
  docSubmissionDate DateTime          @default(now())
  isBlocked         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  deletedAt         DateTime?
  docType           String?
  userRoleMapping   UserRoleMapping[]
  devices           Devices[]
  userWallet        UserWallet[]
  Deposits          Deposits[]
  Withdraws         Withdraws[]
  Beneficiaries     Beneficiaries[]

  @@index([email])
}

model Roles {
  id        String            @id @default(uuid())
  role      Role              @default(USER)
  createdAt DateTime          @default(now())
  updatedAt DateTime?         @updatedAt
  deletedAt DateTime?
  users     UserRoleMapping[]
}

model UserRoleMapping {
  id        String    @id @default(uuid())
  userId    String
  roleId    String
  users     Users     @relation(fields: [userId], references: [id])
  roles     Roles     @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Coins {
  id                String    @id @default(uuid())
  coinId            BigInt?   @unique
  nameId            String?
  name              String?
  priceUsd          String?
  percentChange24h  String?
  percentChange1h   String?
  percentChange7d   String?
  priceBtc          String?
  volume24          String?
  volume24a         String?
  symbol            String?
  marketCapUsd      String?
  rank              Int?
  volume            Int?      @default(10000)
  isVisible         Boolean?  @default(true)
  depositFee        Float?    @default(0.0)
  withdrawFee       Float?    @default(0.0)
  minDepositAmount  Float?    @default(0.0)
  minWithdrawAmount Float?    @default(0.0)
  precision         Int?      @default(8)
  blockchainKey     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  deletedAt         DateTime?

  tradingGroupBase  TradingGroup[] @relation("BaseCoin")
  tradingGroupQuote TradingGroup[] @relation("QuoteCoin")

  coinDetails   CoinDetails[]
  UserWallet    UserWallet[]
  Deposits      Deposits[]
  Withdraws     Withdraws[]
  Beneficiaries Beneficiaries[]

  @@index([coinId])
}

model Devices {
  id        String    @id @default(uuid())
  userId    String
  fcmToken  String?
  // deviceSignature String?
  // deviceType      String?
  // appVersion      String?
  archive   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  user Users @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserWallet {
  id            String        @id @default(uuid())
  userId        String
  coinId        String
  currency      String        @default("USD")
  status        WalletStatus? @default(ACTIVE)
  maxBalance    Float         @default(0.0)
  blockchainKey String?
  address       String
  kind          WalletKind
  settings      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  deletedAt     DateTime?

  coins                 Coins                   @relation(fields: [coinId], references: [id])
  user                  Users                   @relation(fields: [userId], references: [id])
  UserWalletTransaction UserWalletTransaction[]
}

model AppConfig {
  id    String @id @default(uuid())
  key   String
  value String
  type  String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model TradingGroup {
  id              String            @id @default(uuid())
  name            String            @unique
  baseCoinId      String
  quoteCoinId     String
  amountPrecision Int               @default(4)
  pricePrecision  Int               @default(4)
  minPrice        Float             @default(0.0)
  maxprice        Float             @default(0.0)
  minAmount       Float             @default(0.0)
  tradingFees     Float?
  state           TradingGroupState @default(ENABLED)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  deletedAt       DateTime?

  baseCoin  Coins @relation("BaseCoin", fields: [baseCoinId], references: [id])
  quoteCoin Coins @relation("QuoteCoin", fields: [quoteCoinId], references: [id])

  @@index([name])
}

model CoinDetails {
  id               String    @id @default(uuid())
  coinId           String
  chain            String?
  platformDecimals String?
  blockCainSites   String?
  assetPlatformId  String?
  imageUrl         String?
  descripionId     String?
  contractAddress  String?
  categories       String[]
  coin             Coins     @relation(fields: [coinId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?
}

model UserWalletTransaction {
  id          String        @id @default(uuid())
  walletId    String
  operations  OperationType
  isAddition  Boolean
  orderId     String?
  value       Float
  signedValue Decimal
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?

  userWallet UserWallet @relation(fields: [walletId], references: [id])
}

model Deposits {
  id          String       @id @default(uuid())
  userId      String
  coinId      String
  amount      Float
  fee         Float        @default(0.0)
  txid        String?
  address     String?
  state       DepositState @default(PENDING)
  blockNumber Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?
  completedAt DateTime?

  user Users @relation(fields: [userId], references: [id])
  coin Coins @relation(fields: [coinId], references: [id])

  @@unique([coinId, txid])
  @@index([userId])
  @@index([coinId])
  @@index([state])
}

model Withdraws {
  id          String        @id @default(uuid())
  userId      String
  coinId      String
  amount      Float
  fee         Float         @default(0.0)
  txid        String?
  address     String
  state       WithdrawState @default(PENDING)
  blockNumber Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?
  completedAt DateTime?

  user          Users          @relation(fields: [userId], references: [id])
  coin          Coins          @relation(fields: [coinId], references: [id])
  beneficiary   Beneficiaries? @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String?

  @@unique([coinId, txid])
  @@index([userId])
  @@index([coinId])
  @@index([state])
  @@index([beneficiaryId])
}

model Beneficiaries {
  id        String           @id @default(uuid())
  userId    String
  coinId    String
  name      String?
  address   String?
  state     BeneficiaryState @default(PENDING)
  pin       String?
  data      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
  deletedAt DateTime?

  user      Users       @relation(fields: [userId], references: [id])
  coin      Coins       @relation(fields: [coinId], references: [id])
  withdraws Withdraws[]

  @@index([userId])
  @@index([coinId])
  @@index([state])
}
