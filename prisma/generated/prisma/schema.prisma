// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:123456@localhost:5432/coinservice?sslmode=disabled"
}

enum Process {
  PENDING
  APPROVED
  NOTREADY
  REJECTED
}

model Users {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String
  firstName         String?
  lastName          String?
  provider          String?
  providerId        String?
  referralCode      String? // used if someone has invited the user
  countryId         Int?
  phone             String?
  country           String?
  address           String?
  city              String?
  pinCode           String?
  dateOfBirth       String?
  acceptedTerms     Boolean           @default(false)
  mfaEnabled        Boolean           @default(false)
  mfaSecret         String?
  idProofFront      String?
  idProofBack       String?
  profilePicture    String?
  selfiePicture     String?
  isVerifid         Process           @default(NOTREADY)
  rejectionReason   String?
  docSubmissionDate DateTime          @default(now())
  isBlocked         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  deletedAt         DateTime?
  docType           String?
  userRoleMapping   UserRoleMapping[]
  devices           Devices[]
  userWallet        UserWallet[]
  groupTrades       GroupTrade[]

  @@index([email])
}

enum Role {
  ADMIN
  USER
}

model Roles {
  id        String            @id @default(uuid())
  role      Role              @default(USER)
  createdAt DateTime          @default(now())
  updatedAt DateTime?         @updatedAt
  deletedAt DateTime?
  users     UserRoleMapping[]
}

model UserRoleMapping {
  id        String    @id @default(uuid())
  userId    String
  roleId    String
  users     Users     @relation(fields: [userId], references: [id])
  roles     Roles     @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Coins {
  id               String    @id @default(uuid())
  coinId           BigInt?   @unique
  nameId           String?
  name             String?
  priceUsd         String?
  percentChange24h String?
  percentChange1h  String?
  percentChange7d  String?
  priceBtc         String?
  volume24         String?
  volume24a        String?
  symbol           String?
  marketCapUsd     String?
  rank             Int?
  volume           Int?      @default(10000)
  isVisible        Boolean?  @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?

  tradingGroupBase  TradingGroup[] @relation("BaseCoin")
  tradingGroupQuote TradingGroup[] @relation("QuoteCoin")

  coinDetails CoinDetails[]
  UserWallet  UserWallet[]

  @@index([coinId])
}

model Devices {
  id        String    @id @default(uuid())
  userId    String
  fcmToken  String?
  // deviceSignature String?
  // deviceType      String?
  // appVersion      String?
  archive   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  user Users @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserWallet {
  id        String    @id @default(uuid())
  userId    String
  amount    Float
  coinId    String
  currency  String    @default("USD")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  coins                 Coins                   @relation(fields: [coinId], references: [id])
  user                  Users                   @relation(fields: [userId], references: [id])
  UserWalletTransaction UserWalletTransaction[]
}

model AppConfig {
  id    String @id @default(uuid())
  key   String
  value String
  type  String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model TradingGroup {
  id          String    @id @default(uuid())
  name        String    @unique
  baseCoinId  String
  quoteCoinId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  baseCoin  Coins        @relation("BaseCoin", fields: [baseCoinId], references: [id])
  quoteCoin Coins        @relation("QuoteCoin", fields: [quoteCoinId], references: [id])
  trades    GroupTrade[]

  @@index([name])
}

model GroupTrade {
  id          String    @id @default(uuid())
  groupId     String
  userId      String
  amountBase  Float // Amount of base coin (e.g., BTC)
  amountQuote Float // Amount of quote coin (e.g., USDT)
  price       Float // Price of base coin in quote coin (e.g., BTC/USDT price)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  group TradingGroup @relation(fields: [groupId], references: [id])
  user  Users        @relation(fields: [userId], references: [id])

  @@index([groupId, userId])
}

model CoinDetails {
  id                      String    @id @default(uuid())
  coinId                  String
  chain                   String?
  platformContractAddress String?
  platformDecimals        String?
  blockCainSites          String?
  assetPlatformId         String?
  imageUrl                String?
  descripionId            String?
  contractAddress         String?
  categories              String[]
  coin                    Coins     @relation(fields: [coinId], references: [id])
  createdAt               DateTime  @default(now())
  updatedAt               DateTime? @updatedAt
  deletedAt               DateTime?
}

enum OperationType {
  DEPOSIT
  WITHDRAW
  BUY
  SELL
}

model UserWalletTransaction {
  id          String        @id @default(uuid())
  walletId    String
  operations  OperationType
  isAddition  Boolean
  value       Float
  signedValue Decimal
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?

  userWallet UserWallet @relation(fields: [walletId], references: [id])
}
